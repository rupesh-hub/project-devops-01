1. Backend deployment
2. Frontend deployment
3. MySQL database deployment

Deploying locally in docker
---------------------------
1. Create network
2. Create volume
3. Run mysql container

4. Create backend Dockerfile
5. Create frontend Dockerfile

6. Create backend image
7. Push to dockerhub
8. Run backend container

9. Create frontend image
10. Push to dockerhub
11. Run frontend container
---

1. Create network
- docker network ls
- docker network rm <network-name>
- docker network create devops --driver bridge
- docker inspect devops

2. Create volume
- docker volume ls
- docker volume rm <volume-name>
- docker volume create mysql-data
- docker volume inspect mysql-data

3. Run mysql container
- docker run -d --name mysql --network devops -v mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=test_db mysql:8.0
- docker ps
- docker images
- docker logs <mysql-container-id>
- docker exec -it <mysql-container-id> /bin/bash
- bash: mysql -u root -p

4. Create backend Dockerfile
    # 1. BUILD STAGE
    FROM maven:3.8.7-openjdk-18 AS BUILD
    WORKDIR /build
    COPY pom.xml .
    RUN mvn dependency:go-offline
    COPY src ./src
    RUN mvn clean package -DskipTests

    # 2. RUNTIME STAGE
    FROM amazoncorretto:17

    ARG PROFILE=dev
    ARG APP_VERSION=1.0.0

    WORKDIR /app
    COPY --from=BUILD /build/target/backend-*.jar /app/

    EXPOSE 9191
    ENV ACTIVE_PROFILE=${PROFILE}
    ENV JAR_VERSION=${APP_VERSION}
    ENV DB_URL=jdbc:mysql://mysql:3306/test_db

    CMD java -jar -Dspring.profiles.active=${ACTIVE_PROFILE} -Dspring.datasource.url=${DB_URL} backend-${JAR_VERSION}.jar

5. Create frontend Dockerfile & nginx.conf
    FROM node:20 as build-stage

    WORKDIR /app

    COPY package*.json ./
    RUN npm install

    COPY . .
    RUN npm run build --prod

    FROM nginx:alpine

    # Copy custom Nginx configuration
    COPY nginx.conf /etc/nginx/nginx.conf

    # Remove the default configuration
    RUN rm /etc/nginx/conf.d/default.conf

    # Copy the Angular build output to the Nginx HTML directory
    COPY --from=build-stage /app/dist/frontend/browser /usr/share/nginx/html

    EXPOSE 80

    #nginx.conf
    events {}

    http {
        server {
            listen 80;

            location / {
                root /usr/share/nginx/html;
                index index.html;
                try_files $uri $uri/ /index.html;
            }

            # Handle JavaScript | CSS files with the correct MIME type
            location ~ \.(js|css)$ {
                root /usr/share/nginx/html;
                include /etc/nginx/mime.types;
            }

            # Catch-all location to handle refreshes on any route
            location ~ ^/.+$ {
                root /usr/share/nginx/html;
                index index.html;
                try_files $uri /index.html;
            }

            #Backend reverse proxy
            location /api/v1.0.0 {
                proxy_pass http://backend:9191;                              # Pass requests to backend
                proxy_set_header Host $host;                                 # Forward original Host header
                proxy_set_header X-Real-IP $remote_addr;                     # Forward client IP
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Proxy chain
                proxy_set_header X-Forwarded-Proto $scheme;                  # Forward protocol (HTTP/HTTPS)
            }

        }
    }

5. Create docker image: backend / frontend
- docker build -t backend:latest -f ../docker/backend/Dockerfile .
- docker build -t frontend:latest -f ../docker/frontend/Dockerfile .
- docker images

6. Push docker images to docker hub
- docker login -u <username> -p <password>
- docker tag frontend:latest rupesh1997/frontend:latest
- docker tag backend:latest rupesh1997/backend:latest

7. Run docker container : frontend/backend
- docker run -d -p 9191:9191 --name backend --network devops rupesh1997/backend:latest
- docker run -d -p 8080:80 --name frontend --network devops rupesh1997/frontend:latest
- docker ps
- docker logs <container-id>
- docker network inspect <network-name>

- kill all container: docker kill <container-id-1> <container-id-2>
- remove all the stopped container: docker container prune
- remove all the images: docker rmi <image-id-1> <image-id-2>
    - docker rmi $(docker images -q) -> remove all the images
    - docker rmi -f $(docker images -q) -> remove all the images forcefully


Deploying project in EC2 instance
---------------------------------
1. Create AWS account
2. Create AWS EC2 Instance : t2.medium

3. Create docker file for backend and frontend
4. Create ci/cd pipeline : GitHub actions

5. Add all the necessary secrets in GitHub registry
6. Create one self-hosted runner in EC2 instance

7. Install Necessary dependencies or software in EC2 instance
    - docker.io
    - docker compose

8. Ci/Cd automatically deploy the container in EC2 instance

9. To access frontend and backend running in EC2 instance:
    - go to security group and add a inbound rule to make the port access globally

10. Need to prepare docker compose file

Note: IP address, private-key.pem need to add to secret in github secrets
      :-> Same Dockerfile and nginx.conf will work

Deploying projects in Kubernetes in Kind Cluster
------------------------------------------------
1. Register with AWS account
2. Create EC2 instance
3. Install required dependencies: docker.io
4. Install KIND and kubectl
5. Setting Up the KIND Cluster
6. Plan for namespace, deployment, and services
7. Apply all the deployments and services

- kind create cluster --config kind-cluster-config.yaml --name my-kind-cluster
- kubectl get nodes
- kubectl get namespaces
- kubectl get deployment -n <namespace>
- kubectl apply -f <namespace>,<deployment>,<services>
- kubectl get svc -n <namespace>
- kubectl get pods -n <namespace>





